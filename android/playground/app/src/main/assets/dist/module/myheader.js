/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	var __weex_template__ = __webpack_require__(103)
	var __weex_style__ = __webpack_require__(104)
	var __weex_script__ = __webpack_require__(105)
	
	__weex_define__('@weex-component/f43286fde69028b0b8004b853b77d725', [], function(__weex_require__, __weex_exports__, __weex_module__) {
	
	    __weex_script__(__weex_module__, __weex_exports__, __weex_require__)
	    if (__weex_exports__.__esModule && __weex_exports__.default) {
	      __weex_module__.exports = __weex_exports__.default
	    }
	
	    __weex_module__.exports.template = __weex_template__
	
	    __weex_module__.exports.style = __weex_style__
	
	})
	
	__weex_bootstrap__('@weex-component/f43286fde69028b0b8004b853b77d725',undefined,undefined)

/***/ },

/***/ 103:
/***/ function(module, exports) {

	module.exports = {
	  "type": "div",
	  "classList": [
	    "head"
	  ],
	  "children": [
	    {
	      "type": "image",
	      "classList": [
	        "re"
	      ],
	      "events": {
	        "click": "back"
	      },
	      "attr": {
	        "src": function () {return this.resrc}
	      }
	    },
	    {
	      "type": "image",
	      "classList": [
	        "title"
	      ],
	      "attr": {
	        "src": function () {return this.titlesrc}
	      }
	    }
	  ]
	}

/***/ },

/***/ 104:
/***/ function(module, exports) {

	module.exports = {
	  "head": {
	    "flexDirection": "row",
	    "marginTop": 60
	  },
	  "re": {
	    "width": 100,
	    "height": 90,
	    "alignItems": "center",
	    "marginLeft": 20
	  },
	  "title": {
	    "width": 300,
	    "height": 80,
	    "alignItems": "center",
	    "marginLeft": 100
	  }
	}

/***/ },

/***/ 105:
/***/ function(module, exports) {

	module.exports = function(module, exports, __weex_require__){'use strict';
	
	module.exports = {
		data: function () {return {
			resrc: "http://d3.freep.cn/3tb_161223150449strt581068.png",
			titlesrc: ''
		}},
		methods: {
			back: function back() {
				this._parent.$emit('back', {});
			}
		}
	};}
	/* generated by weex-loader */


/***/ }

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,